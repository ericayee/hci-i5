{"version":3,"sources":["eraser.svg","brush.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","newItem","list","counterToggle","fact","darkChecked","brushColor","this","hydrateStateWithLocalStorage","window","addEventListener","saveStateToLocalStorage","bind","removeEventListener","key","value","setState","id","Math","random","slice","push","localStorage","setItem","JSON","stringify","updatedList","filter","item","hasOwnProperty","getItem","parse","e","fetch","then","res","json","data","document","getElementById","innerHTML","catch","console","log","className","style","backgroundColor","color","type","onChange","placeholder","updateInput","target","onClick","addItem","disabled","length","map","deleteItem","getFact","textAlign","margin","src","brush","alt","inlineCanvas","clear","eraser","ref","canvasDraw","canvasWidth","border","title","allowtransparency","frameBorder","width","height","href","rel","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d222216.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/eraser.ed0cabca.svg\";","module.exports = __webpack_public_path__ + \"static/media/brush.c5d7d348.svg\";","import React, { Component } from \"react\";\nimport CanvasDraw from \"react-canvas-draw\";\nimport \"./App.css\";\nimport eraser from './eraser.svg';\nimport brush from './brush.svg';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newItem: \"\",\n      list: [],\n      counterToggle: false,\n      fact: '',\n      darkChecked: false,\n      brushColor: \"#663399\"\n    };\n  }\n\n  componentDidMount() {\n    this.hydrateStateWithLocalStorage();\n\n    // add event listener to save state to localStorage\n    // when user leaves/refreshes page\n    window.addEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\n      \"beforeunload\",\n      this.saveStateToLocalStorage.bind(this)\n    );\n\n    // saves if component has chance to unmount\n    this.saveStateToLocalStorage();\n  }\n\n  updateInput(key, value) {\n    // update react state\n    this.setState({ [key]: value });\n  }\n\n  addItem() {\n    // create a new item\n    const newItem = {\n      id: 1 + Math.random(),\n      value: this.state.newItem.slice()\n    };\n\n    // copy current list of items\n    const list = [...this.state.list];\n\n    // add the new item to the list\n    list.push(newItem);\n\n    // update state with new list, reset the new item input\n    this.setState({\n      list,\n      newItem: \"\"\n    });\n\n    // update localStorage\n    localStorage.setItem(\"list\", JSON.stringify(list));\n    localStorage.setItem(\"newItem\", \"\")\n  }\n\n  deleteItem(id) {\n    // copy current list of items\n    const list = [...this.state.list];\n    // filter out the item being deleted\n    const updatedList = list.filter(item => item.id !== id);\n\n    this.setState({ list: updatedList });\n\n    // update LocalStorage\n    localStorage.setItem(\"list\", JSON.stringify(updatedList));\n  }\n\n  hydrateStateWithLocalStorage() {\n    // for all items in state\n    for (let key in this.state) {\n      // if key exists in localStorage\n      if (localStorage.hasOwnProperty(key)) {\n        // get key's value from localStorage\n        let value = localStorage.getItem(key);\n\n        // parse localStorage string and setState\n        try {\n          value = JSON.parse(value);\n          this.setState({\n            [key]: value\n          });\n        } catch (e) {\n          // handle empty string\n          this.setState({\n            [key]: value\n          });\n        }\n      }\n    }\n  }\n\n  saveStateToLocalStorage() {\n    // for every item in React state\n    for (let key in this.state) {\n      // save to localStorage\n      localStorage.setItem(key, JSON.stringify(this.state[key]));\n    }\n  }\n\n  getFact() {\n    // var url = `https://jsonplaceholder.typicode.com/comments/${Math.floor(Math.random(0,500) * 10)}`;\n    var url = 'https://uselessfacts.jsph.pl/random.json?language=en'\n    fetch(url)\n    .then(res => res.json())\n    .then((data) => {\n      document.getElementById(\"factbox\").innerHTML = data['text'];\n      // this.setState({ fact: data['name'] })\n      // console.log(data);\n    })\n    .catch(console.log)\n\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" style={{backgroundColor: this.state.darkChecked ? '#fff' : '#282c34'}}>\n          <h1 className=\"App-title\" style={{color: this.state.darkChecked ? '#282c34' : '#fff'}}>IS 4300: I5 Gui Implementation</h1>\n          <h3 style={{color: this.state.darkChecked ? '#282c34' : '#fff'}}>By Erica Yee</h3>\n        </header>\n        <label>Change header theme</label>\n        <input type=\"checkbox\" onChange={() => {\n          this.setState({darkChecked: !this.state.darkChecked});\n        }}/>\n        <div className=\"list-container\">\n          <h3>Add a to-do item (these will be saved!):</h3>\n          <input\n            type=\"text\"\n            placeholder=\"Add item here\"\n            value={this.state.newItem}\n            onChange={e => this.updateInput(\"newItem\", e.target.value)}\n          />\n          <button\n            className=\"addButton\"\n            onClick={() => this.addItem()}\n            disabled={!this.state.newItem.length}\n          >\n            +\n          </button>\n          <ul className=\"todos\">\n            {this.state.list.map(item => {\n              return (\n                <li key={item.id}>\n                  {item.value}\n                  <button\n                    className=\"deleteButton\"\n                    onClick={() => this.deleteItem(item.id)}>\n                    -\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n        <div className=\"factContainer\">\n          <h3>Learn a useless fact</h3>\n          <button\n            className=\"factButton\"\n            onClick={() => {\n              this.getFact();\n            }}\n          >Get fact</button>\n          <p id=\"factbox\"><br /></p>\n        </div>\n        <div\n          style={{\n            textAlign: \"center\",\n            margin: \"0 auto\"\n          }}\n        >\n          <h3>Feeling overwhelmed? Draw a little to destress! <span><img src={brush} className=\"icon\" alt=\"brush\" /></span></h3>\n          <div className=\"dropdown\">\n           <button className=\"dropbtn\">Choose color</button>\n           <div className=\"dropdown-content\">\n             <div onClick={() => this.setState({\n               brushColor: \"#663399\"\n             })}>purple</div>\n             <div onClick={() => this.setState({\n               brushColor: \"#993399\"\n             })}>pink</div>\n             <div onClick={() => this.setState({\n               brushColor: \"#333399\"\n             })}>blue</div>\n           </div>\n          </div>\n          <button\n            className=\"tooltip\"\n            onClick={() => {\n              this.inlineCanvas.clear();\n            }}\n          >\n            <img src={eraser} className=\"icon\" alt=\"eraser\" />\n            <span className=\"tooltiptext\">Clear canvas</span>\n          </button>\n          <CanvasDraw\n            className=\"canvas-container\"\n            ref={canvasDraw => (this.inlineCanvas = canvasDraw)}\n            brushColor={this.state.brushColor}\n            canvasWidth={\"100%\"}\n          />\n        </div>\n        <div className=\"counter-container\">\n          <button\n            className=\"surpriseButton\"\n            onClick={() => this.setState({\n              counterToggle: !this.state.counterToggle\n            })}\n            style={this.state.counterToggle ?\n              {backgroundColor: \"lightgray\", border: \"1px solid lightgray\" } : {backgroundColor: \"lightblue\", border: \"1px solid lightblue\" }\n            }\n          >Surprise me</button>\n          {\n            this.state.counterToggle  ?\n            <div className=\"iframe-container\">\n              <h3>Countdown till the end of the semester</h3>\n              <iframe title=\"countdown\" src=\"https://free.timeanddate.com/countdown/i75ffcsp/n43/cf12/cm0/cu4/ct0/cs1/ca0/co0/cr0/ss0/cac000/cpc000/pcfff/tcfff/fn3/fs100/szw576/szh243/iso2020-04-24T23:59:59/pa5\" allowtransparency=\"true\" frameBorder=\"0\" width=\"198\" height=\"59\"></iframe>\n            </div>\n            : <div className=\"placeholderDiv\"></div>\n          }\n\n        </div>\n\n        <div className=\"credits-container\">\n          <h3>Credits</h3>\n            <p>This project was bootstrapped with <a href=\"https://github.com/facebook/create-react-app\" target=\"_blank\" rel=\"noopener noreferrer\">Create React App.</a></p>\n            <p>Thanks to Ryan J. Yost's <a href=\"https://medium.com/hackernoon/how-to-take-advantage-of-local-storage-in-your-react-projects-a895f2b2d3f2\" target=\"_blank\" rel=\"noopener noreferrer\">Hackernoon article</a> and starter code for how to use the Local Storage web API.</p>\n            <p>Thanks to the team behind <a href=\"https://embiem.github.io/react-canvas-draw/\" target=\"_blank\" rel=\"noopener noreferrer\">React Canvas Draw</a> for their awesome component.</p>\n            <p>Thanks to Joseph Paul for his <a href=\"https://uselessfacts.jsph.pl/\" target=\"_blank\" rel=\"noopener noreferrer\">Random Useless Facts</a> API.</p>\n            <p>Thanks to timeanddate.com for the <a href=\"https://www.timeanddate.com/clocks/freecountdown.html\" target=\"_blank\" rel=\"noopener noreferrer\">Free Countdown Timer for Your Website</a> embed.</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}